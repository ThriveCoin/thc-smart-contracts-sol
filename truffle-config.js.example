'use strict'

const HDWalletProvider = require('@truffle/hdwallet-provider')
const infuraPID = ''
const privkey = ''
const etherscanApiKey = ''
const polygonscanApiKey = ''

module.exports = {
  networks: {
    test: {
      host: '127.0.0.1',
      port: 7545,
      network_id: '5777'
    },
    development: {
      host: '127.0.0.1',
      port: 7545,
      network_id: '5777'
    },
    ropsten: {
      provider: () => new HDWalletProvider({
        privateKeys: [privkey],
        providerOrUrl: `wss://ropsten.infura.io/ws/v3/${infuraPID}`
      }),
      network_id: 3,       // Ropsten's id
      gas: 5500000,        // Ropsten has a lower block limit than mainnet
      confirmations: 2,    // # of confs to wait between deployments. (default: 0)
      timeoutBlocks: 200,  // # of blocks before a deployment times out  (minimum/default: 50)
      skipDryRun: true     // Skip dry run before migrations? (default: false for public nets )
    },
    goerli: {
      provider: () => new HDWalletProvider({
        privateKeys: [privkey],
        providerOrUrl: `https://rpc.goerli.mudit.blog`
      }),
      network_id: 5,
      networkCheckTimeout: 1000000,
      timeoutBlocks: 200
    },
    mumbai: {
      provider: () => new HDWalletProvider({
        privateKeys: [privkey],
        providerOrUrl: 'https://matic-mainnet.chainstacklabs.com'
      }),
      network_id: 80001,
      networkCheckTimeout: 1000000,
      timeoutBlocks: 200
    }
  },
  mocha: {
    timeout: 100000
  },
  compilers: {
    solc: {
      version: '0.8.13'
    }
  },
  plugins: [
    "solidity-coverage",
    'truffle-plugin-verify'
  ],
  api_keys: {
    etherscan: etherscanApiKey,
    polygonscan: polygonscanApiKey
  }
}
